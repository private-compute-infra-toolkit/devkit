# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    name = "cpp",
    version = "0.0.1",
)

{% if toolchain == "llvm_custom_sysroot" %}
local_sysroot = use_extension("//devkit/toolchains:extensions.bzl", "local_sysroot")
local_sysroot.sysroot(sha256 = "e110e6c4493ea54fba99f59194b0126011ebfc3f0cd290cf7f5462486508eea7", config = "//:devkit.json")
use_repo(local_sysroot, "sysroot")

bazel_dep(name = "toolchains_llvm", version = "1.4.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    name = "llvm_toolchain_with_custom_sysroot",
    llvm_version = "20.1.0",
)
llvm.sysroot(
    name = "llvm_toolchain_with_custom_sysroot",
    label = "@sysroot//:files",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain_with_custom_sysroot")

register_toolchains("@llvm_toolchain_with_custom_sysroot//:all")
{% elif toolchain == "llvm_bootstrapped" %}
bazel_dep(name = "toolchains_llvm_bootstrapped", version = "0.2.4")

register_toolchains(
    "@toolchains_llvm_bootstrapped//toolchain:linux_amd64",
)
{% endif %}

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "abseil-cpp", version = "20250127.1")

bazel_dep(name = "googletest", version = "1.17.0", dev_dependency = True)
