#!/bin/bash
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset

SCRIPTS="$(dirname -- "$(readlink -f -- "${BASH_SOURCE[0]}")")"
readonly SCRIPTS

source "${SCRIPTS}/lib_logging.sh"

PROJECT_ROOT="$("${SCRIPTS}"/find_project_root)"
readonly PROJECT_ROOT

declare -r DEVKIT_HOME="${HOME}/.devkit"
declare -r BAZELISK_CACHE_HOME="${HOME}/.cache/bazelisk"
declare -r BAZEL_CACHE_HOME="${HOME}/.cache/bazel"
declare -r DOCKER_HOME="${HOME}/.docker"
declare -r GCLOUD_CONFIG_HOME="${HOME}/.config/gcloud"
declare -r GEMINI_HOME="${HOME}/.gemini"
declare -r PRE_COMMIT_CACHE_HOME="${HOME}/.cache/pre-commit"
declare -r PRE_COMMIT_LOCAL_HOME="${HOME}/.local/pre-commit"
declare -r NVIM_SHARE_LOCAL_HOME="${HOME}/.local/share/nvim"
declare -r NVIM_CACHE_HOME="${HOME}/.cache/nvim"
declare -r GO_BUILD_CACHE_HOME="${HOME}/.cache/go-build"
declare -r PYLINT_CACHE_HOME="${HOME}/.cache/pylint"
declare -r NPM_HOME="${HOME}/.npm"
declare -r BUF_CACHE_HOME="${HOME}/.cache/buf"
declare -r STATE_LOCAL_HOME="${HOME}/.local/state"
declare -r PIP_TOOLS_CACHE="${HOME}/.cache/pip-tools"
declare -r PIP_CACHE="${HOME}/.cache/pip"
declare -r MATPLOTLIB_CONFIG="${HOME}/.config/matplotlib"

mkdir -p "${DEVKIT_HOME}"
mkdir -p "${BAZELISK_CACHE_HOME}"
mkdir -p "${BAZEL_CACHE_HOME}"
mkdir -p "${DOCKER_HOME}"
mkdir -p "${GCLOUD_CONFIG_HOME}"
mkdir -p "${GEMINI_HOME}"
mkdir -p "${PRE_COMMIT_CACHE_HOME}"
mkdir -p "${PRE_COMMIT_LOCAL_HOME}"
mkdir -p "${NVIM_SHARE_LOCAL_HOME}"
mkdir -p "${NVIM_CACHE_HOME}"
mkdir -p "${GO_BUILD_CACHE_HOME}"
mkdir -p "${PYLINT_CACHE_HOME}"
mkdir -p "${NPM_HOME}"
mkdir -p "${BUF_CACHE_HOME}"
mkdir -p "${STATE_LOCAL_HOME}"
mkdir -p "${PIP_TOOLS_CACHE}"
mkdir -p "${PIP_CACHE}"
mkdir -p "${MATPLOTLIB_CONFIG}"

declare -r DOCKER_SOCKET="/var/run/docker.sock"
declare -r GIT_CONFIG="${HOME}/.gitconfig"

touch "${GIT_CONFIG}"

declare -r DOCKER_GROUP="docker"
declare -i DOCKER_GROUP_ID
DOCKER_GROUP_ID=$(getent group "${DOCKER_GROUP}" | cut -d: -f3)

declare -r NOBODY_GROUP="nobody"
declare -i NOBODY_GROUP_ID
NOBODY_GROUP_ID=$(getent group "${NOBODY_GROUP}" | cut -d: -f3)

declare -a MOUNTS=(
  "${DEVKIT_HOME}"
  "${BAZELISK_CACHE_HOME}"
  "${BAZEL_CACHE_HOME}"
  "${DOCKER_HOME}"
  "${GCLOUD_CONFIG_HOME}"
  "${GEMINI_HOME}"
  "${PRE_COMMIT_CACHE_HOME}"
  "${PRE_COMMIT_LOCAL_HOME}"
  "${NVIM_SHARE_LOCAL_HOME}"
  "${NVIM_CACHE_HOME}"
  "${GO_BUILD_CACHE_HOME}"
  "${PYLINT_CACHE_HOME}"
  "${NPM_HOME}"
  "${BUF_CACHE_HOME}"
  "${STATE_LOCAL_HOME}"
  "${PIP_TOOLS_CACHE}"
  "${PIP_CACHE}"
  "${MATPLOTLIB_CONFIG}"
  "${DOCKER_SOCKET}"
  "${GIT_CONFIG}"
)

if git rev-parse --is-inside-work-tree &>/dev/null; then
  GIT_DIR="$(git rev-parse --absolute-git-dir)"
  readonly GIT_DIR
  if [[ "${GIT_DIR}" != "${PWD}"* ]]; then
    MOUNTS+=("${GIT_DIR}")
  fi
fi

declare -a ADDITIONAL_ENV=()

declare -a LIST_EXTERNAL_MOUNTS_ARGS=()
LIST_EXTERNAL_MOUNTS_ARGS+=(--root-dir "${PROJECT_ROOT}")
for path in "${MOUNTS[@]}"; do
  LIST_EXTERNAL_MOUNTS_ARGS+=(--mount "${path}")
done

mapfile -t MOUNTS < <("${SCRIPTS}/list_external_mounts.py" "${LIST_EXTERNAL_MOUNTS_ARGS[@]}")

declare -a DOCKER_RUN_ARGS=()
if [[ -t 0 ]] && [[ -t 1 ]]; then
  DOCKER_RUN_ARGS+=(
    "--interactive"
    "--tty"
  )
elif [[ ! -t 0 ]]; then
  DOCKER_RUN_ARGS+=("--interactive")
fi

mapfile -t DOCKER_RUN_ARGS_FROM_JSON < <(
  export PROJECT_ROOT
  python3 - <<'EOF'
import json
import os
try:
    devkit_json_path = os.path.join(os.environ["PROJECT_ROOT"], "devkit.json")
    with open(devkit_json_path) as f:
        data = json.load(f)
        args = data["docker"]["run"]
        if args:
            print("\n".join(args))
except Exception:
    pass
EOF
)

DOCKER_RUN_ARGS+=("${DOCKER_RUN_ARGS_FROM_JSON[@]}")

if [[ -n "${DEVKIT_DOCKER_RUN_ARGS:-}" ]]; then
  read -r -a devkit_docker_run_args <<<"${DEVKIT_DOCKER_RUN_ARGS}"
  DOCKER_RUN_ARGS+=("${devkit_docker_run_args[@]}")
fi

declare -a EVALUATED_DOCKER_RUN_ARGS=()
for arg in "${DOCKER_RUN_ARGS[@]}"; do
  eval "expanded_arg=${arg}"
  EVALUATED_DOCKER_RUN_ARGS+=("${expanded_arg}")
done

declare -a DOCKER_MOUNTS=()
for path in "${MOUNTS[@]}"; do
  DOCKER_MOUNTS+=("--volume=${path}:${path}")
done

docker run \
    --rm \
    --volume="${PROJECT_ROOT}:${PROJECT_ROOT}" \
    --workdir="${PWD}" \
    --env="HOME" \
    --env="GEMINI_API_KEY" \
    --env="GH_TOKEN" \
    --env="USER=$(id -u -n)" \
    --env="USER_ID=$(id -u)" \
    --env="GROUP=$(id -g -n)" \
    --env="GROUP_ID=$(id -g)" \
    --env="DOCKER_GROUP=${DOCKER_GROUP}" \
    --env="DOCKER_GROUP_ID=${DOCKER_GROUP_ID}" \
    --env="NOBODY_GROUP=${NOBODY_GROUP}" \
    --env="NOBODY_GROUP_ID=${NOBODY_GROUP_ID}" \
    "${ADDITIONAL_ENV[@]}" \
    "${DOCKER_MOUNTS[@]}" \
    --net=host \
    --hostname="$(hostname)" \
    --volume="/tmp:/tmp" \
    --entrypoint="${SCRIPTS}/entrypoint_docker" \
    "${EVALUATED_DOCKER_RUN_ARGS[@]}" \
    "$@"
